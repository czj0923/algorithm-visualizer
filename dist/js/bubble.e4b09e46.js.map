{"version":3,"file":"js/bubble.e4b09e46.js","mappings":"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","sources":["webpack://algorithm-visualizer/./src/store/sort.ts","webpack://algorithm-visualizer/./src/utils/SortingAlgorithm/bubbleSort.ts","webpack://algorithm-visualizer/./src/utils/SortingAlgorithm/insertionSort.ts","webpack://algorithm-visualizer/./src/utils/SortingAlgorithm/selectionSort.ts","webpack://algorithm-visualizer/./src/utils/SortingAlgorithm/countingSort.ts","webpack://algorithm-visualizer/./src/utils/shuffle.ts","webpack://algorithm-visualizer/./src/views/sort/BubbleSort.vue?c0a6","webpack://algorithm-visualizer/./src/views/sort/BubbleSort.vue"],"sourcesContent":["import { defineStore } from \"pinia\";\nimport { IInfo } from \"@/types/sort\";\n\ninterface ISortStoreState {\n  length: number;\n  delay: number;\n  sortInfo: IInfo[];\n  curStep: IInfo;\n  stepCount: number;\n}\n\nexport const useSortStore = defineStore(\"sort\", {\n  state: (): ISortStoreState => {\n    return {\n      length: 10, //排序的数组长度\n      delay: 700, //自动播放的延时\n      //所有排序的信息\n      sortInfo: [\n        {\n          arr: [],\n          desc: \"\",\n        },\n      ],\n      //当前\n      curStep: {\n        arr: [],\n        desc: \"\",\n      },\n      stepCount: 0, //总步数\n    };\n  },\n  getters: {},\n  actions: {},\n});\n","/**\n * 冒泡排序\n * @param {ISortItem[]} arr\n * @return {IInfo[]}\n */\nimport { ISortItem, IInfo } from \"@/types/sort\";\n\nconst bubbleSort = (arr: ISortItem[]): IInfo[] => {\n  const l = arr.length;\n  let temp;\n  const infoArr: IInfo[] = [\n    {\n      arr: JSON.parse(JSON.stringify(arr)),\n      desc: \"开始\",\n    },\n  ];\n\n  for (let i = 0; i < l - 1; i++) {\n    for (let j = 0; j < l - i - 1; j++) {\n      let flag = false; //标记是否发生交换\n      const num1 = arr[j].value,\n        num2 = arr[j + 1].value; //当前交换的两个数字\n      if (arr[j].value > arr[j + 1].value) {\n        temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n        flag = true;\n      }\n      if (i >= l - 2) {\n        arr[j].status = 2;\n        arr[j + 1].status = 2;\n      } else {\n        arr[j].status = 1;\n        arr[j + 1].status = 1;\n      }\n\n      let desc = \"\";\n      if (flag) {\n        desc = `${num1}>${num2},交换位置`;\n      } else {\n        desc = `${num1}<${num2},不交换`;\n      }\n      infoArr.push({\n        arr: JSON.parse(JSON.stringify(arr)),\n        desc,\n      });\n      arr[j].status = 0;\n      arr[j + 1].status = 0;\n      if (j >= l - i - 2) {\n        arr[j + 1].status = 2;\n      }\n    }\n  }\n  return infoArr;\n};\n\nexport default bubbleSort;\n","/**\n * 插入排序\n * @param {ISortItem[]} arr\n * @return {IInfo[]}\n */\nimport { ISortItem, IInfo } from \"@/types/sort\";\n\nconst bubbleSort = (arr: ISortItem[]): IInfo[] => {\n  const l = arr.length;\n  let temp, j;\n  const infoArr: IInfo[] = [\n    {\n      arr: JSON.parse(JSON.stringify(arr)),\n      desc: \"\",\n    },\n  ];\n\n  for (let i = 0; i < l; i++) {\n    j = i - 1;\n    const cur = arr[i];\n\n    while (j >= 0 && arr[j].value > cur.value) {\n      arr[j].status = 1;\n      cur.status = 1;\n      infoArr.push({\n        arr: JSON.parse(JSON.stringify(arr)),\n        desc: `${i},${j}`,\n      });\n      arr[j].status = 0;\n      cur.status = 0;\n\n      temp = arr[j];\n      arr[j] = arr[j + 1];\n      arr[j + 1] = temp;\n      j--;\n    }\n    arr[j + 1] = cur;\n  }\n  infoArr.push({\n    arr: JSON.parse(JSON.stringify(arr)),\n    desc: `结束了`,\n  });\n  return infoArr;\n};\n\nexport default bubbleSort;\n","/**\n * 选择排序\n * @param {ISortItem[]} arr\n * @return {IInfo[]}\n */\nimport { ISortItem, IInfo } from \"@/types/sort\";\n\nconst selectionSort = (arr: ISortItem[]): IInfo[] => {\n  const l = arr.length;\n  const infoArr: IInfo[] = [\n    {\n      arr: JSON.parse(JSON.stringify(arr)),\n      desc: \"选择排序\",\n    },\n  ];\n  let minIndex = 0,\n    temp;\n\n  for (let i = 0; i < l - 1; i++) {\n    minIndex = i;\n\n    for (let j = i + 1; j < l; j++) {\n      let flag = false; //标记最小值是否发生改变\n      const num1 = arr[minIndex].value,\n        num2 = arr[j].value,\n        prevMinIndex = minIndex; //保留前一个最小值的序号\n\n      if (arr[minIndex].value > arr[j].value) {\n        minIndex = j;\n        flag = true;\n      }\n\n      let desc = \"\";\n      if (flag) {\n        arr[prevMinIndex].status = 1;\n        arr[minIndex].status = 3;\n        desc = `当前未排序队列中最小值为${num2},下标${minIndex},改变了`;\n      } else {\n        arr[j].status = 1;\n        arr[minIndex].status = 3;\n        desc = `当前未排序队列中最小值为${num1},下标${minIndex}`;\n      }\n      infoArr.push({\n        arr: JSON.parse(JSON.stringify(arr)),\n        desc,\n      });\n\n      arr[j].status = 0;\n      //最小值发生改变时需要清除上一个最小值项的status\n      if (flag) {\n        arr[prevMinIndex].status = 0;\n      } else {\n        arr[minIndex].status = 0;\n      }\n    }\n    temp = arr[minIndex];\n    arr[minIndex] = arr[i];\n    arr[i] = temp;\n\n    arr[i].status = 2;\n\n    //判断是否为最后一步\n    if (i === l - 2) {\n      arr[i + 1].status = 2;\n      infoArr.push({\n        arr: JSON.parse(JSON.stringify(arr)),\n        desc: `排序结束`,\n      });\n    } else {\n      infoArr.push({\n        arr: JSON.parse(JSON.stringify(arr)),\n        desc: `一轮遍历结束，当前未排序队列中最小值为${arr[i].value},交换到已排序队列的末尾`,\n      });\n    }\n  }\n  return infoArr;\n};\n\nexport default selectionSort;\n","/**\n * 计数排序\n * @param {number[]} arr\n * @return {number[]}\n */\n\nconst countingSort = (arr: number[]): number[] => {\n  const l = arr.length;\n  const newArr: number[] = [];\n  for (let i = 0; i < l; i++) {\n    newArr[arr[i]]++;\n  }\n  return arr;\n};\nconst arr = [5, 2, 4, 8, 7, 6, 5, 4, 1];\ncountingSort(arr);\n\nexport default countingSort;\n","/**\n * Fisher–Yates shuffle 洗牌算法\n * @param {T[]} arr\n * @return {T[]}\n */\n\nexport const shuffle = <T>(arr: T[]): T[] => {\n  let l = arr.length;\n  let index, temp;\n  while (l > 0) {\n    index = Math.floor(Math.random() * l);\n    temp = arr[l - 1];\n    arr[l - 1] = arr[index];\n    arr[index] = temp;\n    l--;\n  }\n\n  return arr;\n};\n","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, TransitionGroup as _TransitionGroup, withCtx as _withCtx, createVNode as _createVNode } from \"vue\"\n\nconst _hoisted_1 = { class: \"panel\" }\nconst _hoisted_2 = { class: \"num\" }\n\nimport { onMounted, reactive } from \"vue\";\nimport { shuffle } from \"@/utils/shuffle\";\nimport { IState, ISortItem, IInfo } from \"@/types/sort\";\nimport { bubbleSort } from \"@/utils/SortingAlgorithm\";\nimport { useSortStore } from \"@/store/sort\";\n\n\nexport default /*#__PURE__*/_defineComponent({\n  setup(__props) {\n\nconst store = useSortStore();\nconst state: IState = reactive({\n  arr: [],\n});\n\nonMounted(() => {\n  for (let i = 1; i <= store.length; i++) {\n    let obj: ISortItem = {\n      value: i,\n      status: 0,\n    };\n    state.arr.push(obj);\n  }\n  shuffle(state.arr);\n  let info = bubbleSort(state.arr);\n  store.sortInfo = info;\n  store.stepCount = info.length;\n  store.curStep = (store.sortInfo as IInfo[])[0];\n});\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createVNode(_TransitionGroup, { name: \"flip-list\" }, {\n      default: _withCtx(() => [\n        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(store).curStep.arr, (item) => {\n          return (_openBlock(), _createElementBlock(\"div\", {\n            class: _normalizeClass([\"bar\", { switch: item.status == 1, finish: item.status == 2 }]),\n            key: item.value,\n            style: _normalizeStyle({ height: (450 / _unref(store).length) * item.value + 'px' })\n          }, [\n            _createElementVNode(\"span\", _hoisted_2, _toDisplayString(item.value), 1)\n          ], 6))\n        }), 128))\n      ]),\n      _: 1\n    })\n  ]))\n}\n}\n\n})","import script from \"./BubbleSort.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./BubbleSort.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["useSortStore","state","length","delay","sortInfo","arr","desc","curStep","stepCount","getters","actions","bubbleSort","temp","l","infoArr","JSON","parse","stringify","i","j","flag","num1","value","num2","status","push","cur","selectionSort","minIndex","prevMinIndex","countingSort","newArr","shuffle","index","Math","floor","random","_hoisted_1","class","_hoisted_2","setup","__props","store","obj","info","_ctx","_cache","name","default","item","switch","finish","key","style","height","_","__exports__"],"sourceRoot":""}